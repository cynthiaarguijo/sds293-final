---
title: "water_quality_final"
format: 
  pdf:
    embed-resources: true
editor: source
bibliography: waterquality.bib
csl: apa.csl
---

## Introduction

The current state of Austin’s water quality is a cause for concern, despite the city’s efforts to manage and protect its water resources (@Austin2024). This contamination includes fecal bacteria, often caused by Sewage spills, sewage overflows, and contaminated stormwater (@Hama_Aziz_2023). Fecal contamination in water bodies can increase risk of illness in humans through contact during recreational activities such as swimming and wading (@Porras_Kocian_2020), and heavy metals can cause harm to various organs, even at low exposure levels (@Hama_Aziz_2023). Studies have shown that socioeconomic disparities can be related to exposure to contaminated water (@Adelodun_2021). Using the Water Quality Sampling data set from the City of Austin Water Resources Monitoring database and the Austin Census data about median household income in 2015 and 2016, we aim to show the spatial correlation between bacterial water contamination and median income level.




```{r}
library(tidyverse)
library(dplyr)
library(readr)
library(ggplot2)
library(stringr)
library(tidyr)
library(maps)
library(tidygeocoder)
library(caret)
Water_Quality_Sampling_Data <- read_csv("Water_Quality_Sampling_Data.csv")
```

```{r}
water_data <- Water_Quality_Sampling_Data |> mutate(SAMPLE_DATE = as.Date(SAMPLE_DATE, format = "%m/%d/%Y %I:%M:%S %p")) %>% mutate(YEAR = format(as.Date(SAMPLE_DATE), "%Y")) %>% mutate(MONTH = format(as.Date(SAMPLE_DATE), "%m")) %>% filter(YEAR > "2007", YEAR < "2020")
```

training data and testing data

```{r}
# filter by medium to be only Ground Water and Surface Water
# filter pounds units out
# filter for only bacteria/pathogens and metals
# filter for 2015 only in training, 2016 only in testing
# filter out non-harmful metals in param
training_water <- water_data |> filter(MEDIUM %in% c("Ground Water", "Surface Water"), UNIT != "Pounds (lbs)", PARAM_TYPE %in% c("Bacteria/Pathogens", "Metals"), YEAR =="2015", !(PARAMETER %in% c("ALUMINUM", "BARIUM", "BORON", "STRONTIUM")))
# convert mg/l to ug/l to have all units in unison
training_water$RESULT[training_water$UNIT == "MG/L"] <- training_water$RESULT[training_water$UNIT == "MG/L"] * 1000
training_water$UNIT[training_water$UNIT == "MG/L"] <- "UG/L"


testing_water <- water_data |> filter(MEDIUM %in% c("Ground Water", "Surface Water"), UNIT != "Pounds (lbs)", PARAM_TYPE %in% c("Bacteria/Pathogens", "Metals"), YEAR == "2016", !(PARAMETER %in% c("ALUMINUM", "BARIUM", "BORON", "STRONTIUM")))
# convert mg/l to ug/l to have all units in unison
testing_water$RESULT[testing_water$UNIT == "MG/L"] <- testing_water$RESULT[testing_water$UNIT == "MG/L"] * 1000
testing_water$UNIT[testing_water$UNIT == "MG/L"] <- "UG/L"
```

training data zip

```{r}
# reverse geocode, add address column by using lat and lon
training_water_zip <- training_water |>
    reverse_geocode(lat = LAT_DD_WGS84, long = LON_DD_WGS84, address = addr, method = "osm")
```

```{r}
# fixing addresses that do not contain a zip code

# "Austin, Travis County, Texas, United States" all correspond to Walter E. Long Lake
training_water_zip <- training_water_zip %>%
  mutate(addr = ifelse(addr == "Austin, Travis County, Texas, United States",
                       "Daffan Lane, Austin, Texas, 78724, United States",
                       addr))
# "FM 973 North, Travis County, Texas, United States" all correspond to Gilleland Creek
training_water_zip <- training_water_zip %>%
  mutate(addr = ifelse(addr == "FM 973 North, Travis County, Texas, United States",
                       "FM 973 North, Travis County, Texas, 78763, United States",
                       addr))
# "Travis County, Texas, United States" all correspond to the same area of Barton Creek
training_water_zip <- training_water_zip %>%
  mutate(addr = ifelse(addr == "Travis County, Texas, United States",
                       "Travis County, Texas, 78736, United States",
                       addr))
# "Webberville Road, Travis County, Texas, United States" all correspond to Gilleland Creek
training_water_zip <- training_water_zip %>%
  mutate(addr = ifelse(addr == "Webberville Road, Travis County, Texas, United States",
                       "17322 Webberville Road, Travis County, Texas, 78653, United States",
                       addr))
```

```{r}
# identify where the missing address values are because of missing lat lon coordinates -> they are all in bear creek

training_water_zip %>%
  filter(is.na(addr)) %>%
  pull(WATERSHED) %>%
  unique()

#replace NA for address of bear creek

training_water_zip <- training_water_zip %>%
  mutate(addr = ifelse(is.na(addr),
                        "Bear Creek, Hays County, Texas, 78737, United States",
                        addr))

```

```{r}
# make a zip code column 

training_water_zip <- training_water_zip %>%
  mutate(ZIP = str_extract(addr, "\\b7\\d{4}\\b"))

```

testing data zip

```{r}
# reverse geocode, add address column by using lat and lon
testing_water_zip <- testing_water |>
    reverse_geocode(lat = LAT_DD_WGS84, long = LON_DD_WGS84, address = addr, method = "osm")
```

```{r}
# identify where the missing address values for testing data are because of missing lat lon coordinates -> they are in bear creek and barton creek (specifically airman's cave)
testing_water_zip %>%
  filter(is.na(addr)) %>%
  pull(WATERSHED) %>%
  unique()
```

```{r}
#replace NA for address of bear creek observations

testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(is.na(addr) & WATERSHED == "Bear Creek",
                       "Bear Creek, Hays County, Texas, 78737, United States",
                       addr))

# replace NA for address of barton creek airman's cave

testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(is.na(addr) & WATERSHED == "Barton Creek",
                       "Austin, Texas, 78704, United States",
                       addr))
```

```{r}
# fixing addresses that do not contain a zip code

# "Austin, Travis County, Texas, United States" all correspond to Walter E. Long Lake
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Austin, Travis County, Texas, United States",
                       "Daffan Lane, Austin, Texas, 78724, United States",
                       addr))
# "Cannonville, Howard Ranch, Hays County, Texas, United States" all correspond to Onion Creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Cannonville, Howard Ranch, Hays County, Texas, United States",
                       "Hays County, Texas, 78619, United States",
                       addr))
# "Hays County, Texas, United States" correspond to two different parts of Onion Creek, but they both have zip code 78619
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Hays County, Texas, United States",
                       "Hays County, Texas, 78619, United States",
                       addr))
# "McCafferty Road, Hays County, Texas, United States" corresponds to a part of onion creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "McCafferty Road, Hays County, Texas, United States",
                       "Hays County, Texas, 78620, United States",
                       addr))
# "Pursley Road, Hays County, Texas, United States" corresponds to a part of onion creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Pursley Road, Hays County, Texas, United States",
                       "Pursley Road, Mount Sharp, Hays County, Texas, 78620, United States",
                       addr))
# "Ranch Road 12, Hays County, Texas, United States" corresponds to a part of onion creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Ranch Road 12, Hays County, Texas, United States",
                       "Hays County, Texas, 78619, United States",
                       addr))
# "Ranch Road 150 West, Dripping Springs, Hays County, Texas, United States" corresponds to a part of onion creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Ranch Road 150 West, Dripping Springs, Hays County, Texas, United States",
                       "Ranch Road 150 West, Hays County, Texas, 78619, United States",
                       addr))
# "Ranch to Market Road 967, Buda, Hays County, Texas, United States" corresponds to a little bear creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Ranch to Market Road 967, Buda, Hays County, Texas, United States",
                       "Ranch to Market Road 967, Buda, Texas, 78610, United States",
                       addr))
# "Wylie Kuykendall Lane, Hays County, Texas, United States" corresponds to a part of onion creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Wylie Kuykendall Lane, Hays County, Texas, United States",
                       "Wylie Kuykendall Lane, Hays County, Texas, 78667, United States",
                       addr))
```

```{r}
# make a zip code column 

testing_water_zip <- testing_water_zip %>%
  mutate(ZIP = str_extract(addr, "\\b7\\d{4}\\b"))

```

make into data for modelling :D

```{r}
training <- training_water_zip %>%
  group_by(ZIP) %>%
  summarise(
    total_frequency = n(),
    median_arsenic = median(RESULT[PARAMETER == "ARSENIC"], na.rm = TRUE),
    median_cadmium = median(RESULT[PARAMETER == "CADMIUM"], na.rm = TRUE),
    median_chromium = median(RESULT[PARAMETER == "CHROMIUM"], na.rm = TRUE),
    median_copper = median(RESULT[PARAMETER == "COPPER"], na.rm = TRUE),
    median_ecoli = median(RESULT[PARAMETER == "E COLI BACTERIA"], na.rm = TRUE),
    median_iron = median(RESULT[PARAMETER == "IRON"], na.rm = TRUE),
    median_lead = median(RESULT[PARAMETER == "LEAD"], na.rm = TRUE),
    median_lithium = median(RESULT[PARAMETER == "LITHIUM"], na.rm = TRUE),
    median_nickel = median(RESULT[PARAMETER == "NICKEL"], na.rm = TRUE),
    median_coliform = median(RESULT[PARAMETER == "TOTAL COLIFORM BACTERIA"], na.rm = TRUE),
    median_zinc = median(RESULT[PARAMETER == "ZINC"], na.rm = TRUE),
    .groups = "drop"
  )
```

```{r}
testing <- testing_water_zip %>%
  group_by(ZIP) %>%
  summarise(
    total_frequency = n(),
    median_arsenic = median(RESULT[PARAMETER == "ARSENIC"], na.rm = TRUE),
    median_cadmium = median(RESULT[PARAMETER == "CADMIUM"], na.rm = TRUE),
    median_chromium = median(RESULT[PARAMETER == "CHROMIUM"], na.rm = TRUE),
    median_copper = median(RESULT[PARAMETER == "COPPER"], na.rm = TRUE),
    median_ecoli = median(RESULT[PARAMETER == "E COLI BACTERIA"], na.rm = TRUE),
    median_iron = median(RESULT[PARAMETER == "IRON"], na.rm = TRUE),
    median_lead = median(RESULT[PARAMETER == "LEAD"], na.rm = TRUE),
    median_lithium = median(RESULT[PARAMETER == "LITHIUM"], na.rm = TRUE),
    median_nickel = median(RESULT[PARAMETER == "NICKEL"], na.rm = TRUE),
    median_coliform = median(RESULT[PARAMETER == "TOTAL COLIFORM BACTERIA"], na.rm = TRUE),
    median_zinc = median(RESULT[PARAMETER == "ZINC"], na.rm = TRUE),
    .groups = "drop"
  )
```

remove zip codes that don't have income and household data and zip codes that don't have e coli sampling

```{r}
testing <- testing |> filter(!(ZIP %in% c("78667", "78680", "78691", "78712", "78763", "78767", "78717", "78754")))
```

```{r}
training <- training |> filter(!(ZIP %in% c("78667", "78680", "78691", "78712", "78763", "78767", "78717", "78754")))
```


```{r}
zipcode <- read_csv("zipcode.csv")
zipcode <- zipcode |>
  select(zipcode, n_household_2015, median_income2015, n_household_2016, median_income2016) |>
  filter(zipcode != 78667 & zipcode != 78680 & zipcode != 78691 & zipcode != 78712 & zipcode != 78763 & zipcode != 78767)

zipcode2015 <- zipcode |>
  select(zipcode, n_household_2015, median_income2015) |>
  rename(ZIP = zipcode)
  
zipcode2016 <- zipcode |>
  select(zipcode, n_household_2016, median_income2016) |>
  rename(ZIP = zipcode)

zipcode2015$lowincome <- ifelse(zipcode2015$median_income2015 < 55653, 1, 0)
zipcode2016$lowincome <- ifelse(zipcode2015$median_income2015 < 59039, 1, 0)
```

```{r}
testing$ZIP <- as.numeric(testing$ZIP)
training$ZIP <- as.numeric(training$ZIP)
zip_training <- left_join(training, zipcode2015, by = "ZIP")
zip_testing <- left_join(testing, zipcode2016, by = "ZIP")
```

```{r}
#model
set.seed(1)

glm.fits <- glm(lowincome ~ total_frequency + median_ecoli, data = zip_training, family = binomial)
summary(glm.fits)

```

$$p(low income) = \hat{\beta_0} + \hat{\beta_1}frequency + \hat{\beta_2}ecoli$$

```{r}
# Predict probabilities on the test set (zip_testing)
predicted_probabilities <- predict(glm.fits, newdata = zip_testing, type = "response")

# Convert probabilities to binary predictions: 1 if probability > 0.5, otherwise 0
predicted_class <- ifelse(predicted_probabilities > 0.5, 1, 0)

# Add predicted class as a new column to zip_testing
zip_testing$predicted_lowincome <- predicted_class

# View the predictions
head(zip_testing[, c("lowincome", "predicted_lowincome")])  # Compare actual vs predicted
# Create confusion matrix
table(Actual = zip_testing$lowincome, Predicted = zip_testing$predicted_lowincome)
accuracy <- mean(zip_testing$lowincome == zip_testing$predicted_lowincome)
confusion_matrix <- confusionMatrix(as.factor(zip_testing$predicted_lowincome), as.factor(zip_testing$lowincome))
print(confusion_matrix)

```


model 2


```{r}
training2 <- training_water_zip %>%
  group_by(ZIP) %>%
  summarise(
    total_frequency = n(),
    median_ecoli = median(RESULT[PARAMETER == "E COLI BACTERIA"], na.rm = TRUE),
    median_arsenic = median(RESULT[PARAMETER == "ARSENIC"], na.rm = TRUE),
    median_cadmium = median(RESULT[PARAMETER == "CADMIUM"], na.rm = TRUE),
    median_chromium = median(RESULT[PARAMETER == "CHROMIUM"], na.rm = TRUE),
    median_copper = median(RESULT[PARAMETER == "COPPER"], na.rm = TRUE),
    median_iron = median(RESULT[PARAMETER == "IRON"], na.rm = TRUE),
    median_lead = median(RESULT[PARAMETER == "LEAD"], na.rm = TRUE),
    median_lithium = median(RESULT[PARAMETER == "LITHIUM"], na.rm = TRUE),
    median_nickel = median(RESULT[PARAMETER == "NICKEL"], na.rm = TRUE),
    median_coliform = median(RESULT[PARAMETER == "TOTAL COLIFORM BACTERIA"], na.rm = TRUE),
    median_zinc = median(RESULT[PARAMETER == "ZINC"], na.rm = TRUE),
    metal_testing = as.integer(any(PARAM_TYPE == "Metals")),
    arsenic_testing = as.integer(any(PARAMETER == "ARSENIC")),
    cadmium_testing = as.integer(any(PARAMETER == "CADMIUM")),
    chromium_testing = as.integer(any(PARAMETER == "CHROMIUM")),
    copper_testing = as.integer(any(PARAMETER == "COPPER")),
    iron_testing = as.integer(any(PARAMETER == "IRON")),
    lead_testing = as.integer(any(PARAMETER == "LEAD")),
    lithium_testing = as.integer(any(PARAMETER == "LITHIUM")),
    nickel_testing = as.integer(any(PARAMETER == "NICKEL")),
    zinc_testing = as.integer(any(PARAMETER == "ZINC")),
    coliform_testing = as.integer(any(PARAMETER == "TOTAL COLIFORM BACTERIA")),
    .groups = "drop"
   )
```


```{r}
testing2 <- testing_water_zip %>%
  group_by(ZIP) %>%
  summarise(
    total_frequency = n(),
    median_ecoli = median(RESULT[PARAMETER == "E COLI BACTERIA"], na.rm = TRUE),
    median_arsenic = median(RESULT[PARAMETER == "ARSENIC"], na.rm = TRUE),
    median_cadmium = median(RESULT[PARAMETER == "CADMIUM"], na.rm = TRUE),
    median_chromium = median(RESULT[PARAMETER == "CHROMIUM"], na.rm = TRUE),
    median_copper = median(RESULT[PARAMETER == "COPPER"], na.rm = TRUE),
    median_iron = median(RESULT[PARAMETER == "IRON"], na.rm = TRUE),
    median_lead = median(RESULT[PARAMETER == "LEAD"], na.rm = TRUE),
    median_lithium = median(RESULT[PARAMETER == "LITHIUM"], na.rm = TRUE),
    median_nickel = median(RESULT[PARAMETER == "NICKEL"], na.rm = TRUE),
    median_coliform = median(RESULT[PARAMETER == "TOTAL COLIFORM BACTERIA"], na.rm = TRUE),
    median_zinc = median(RESULT[PARAMETER == "ZINC"], na.rm = TRUE),
    metal_testing = as.integer(any(PARAM_TYPE == "Metals")),
    arsenic_testing = as.integer(any(PARAMETER == "ARSENIC")),
    cadmium_testing = as.integer(any(PARAMETER == "CADMIUM")),
    chromium_testing = as.integer(any(PARAMETER == "CHROMIUM")),
    copper_testing = as.integer(any(PARAMETER == "COPPER")),
    iron_testing = as.integer(any(PARAMETER == "IRON")),
    lead_testing = as.integer(any(PARAMETER == "LEAD")),
    lithium_testing = as.integer(any(PARAMETER == "LITHIUM")),
    nickel_testing = as.integer(any(PARAMETER == "NICKEL")),
    zinc_testing = as.integer(any(PARAMETER == "ZINC")),
    coliform_testing = as.integer(any(PARAMETER == "TOTAL COLIFORM BACTERIA")),
    .groups = "drop"
   )
```

remove zip codes that don't have income and household data and that dont have ecoli data

```{r}
testing2 <- testing2 |> filter(!(ZIP %in% c("78667", "78680", "78691", "78712", "78763", "78767", "78717", "78754")))
```

```{r}
training2 <- training2 |> filter(!(ZIP %in% c("78667", "78680", "78691", "78712", "78763", "78767", "78717", "78754")))
```

```{r}
testing2$ZIP <- as.numeric(testing2$ZIP)
training2$ZIP <- as.numeric(training2$ZIP)
zip_training2 <- left_join(training2, zipcode2015, by = "ZIP")
zip_testing2 <- left_join(testing2, zipcode2016, by = "ZIP")
```

```{r}
set.seed(1)

glm.fits2 <- glm(lowincome ~ total_frequency + median_ecoli + zinc_testing*median_zinc + lead_testing*median_lead + arsenic_testing*median_arsenic + cadmium_testing*median_cadmium + chromium_testing*median_chromium + copper_testing*median_copper + iron_testing*median_iron + nickel_testing*median_nickel, data = zip_training2, family = binomial)


summary(glm.fits2)
```


```{r}
# Predict probabilities on the test set (zip_testing)
predicted_probabilities <- predict(glm.fits2, newdata = zip_testing2, type = "response")

summary(predicted_probabilities)

# Convert probabilities to binary predictions: 1 if probability > 0.5, otherwise 0
predicted_class <- ifelse(predicted_probabilities > 0.43, 1, 0)

#what is the proportion of the high income to low income, can we think about specificity and sensitivity... use ROC curve

library(pROC)
model_roc <- roc(zip_testing2$lowincome, predicted_probabilities, quiet = TRUE)
model_roc |> ggroc(legacy.axes = TRUE) + geom_abline(intercept = 0, slope = 1) + theme_bw(18)
auc(model_roc)

# if we want to finda. good cutoff, we want to find
coords(model_roc, x = "best", best.method = "youden")
#best cutoff is 0.43 and specificity = high income correct 52% of the time, and sensiticity = correct low income prediction


# Add predicted class as a new column to zip_testing
zip_testing2$predicted_lowincome <- predicted_class

# View the predictions
head(zip_testing2[, c("lowincome", "predicted_lowincome")])  # Compare actual vs predicted
# Create confusion matrix
table(Actual = zip_testing2$lowincome, Predicted = zip_testing2$predicted_lowincome)
accuracy <- mean(zip_testing2$lowincome == zip_testing2$predicted_lowincome)
confusion_matrix <- confusionMatrix(as.factor(zip_testing2$predicted_lowincome), as.factor(zip_testing2$lowincome))
print(confusion_matrix)

```


model 3:

```{r}
training3 <- training_water_zip %>%
  group_by(ZIP) %>%
  summarise(
    total_frequency = n(),
    median_ecoli = median(RESULT[PARAMETER == "E COLI BACTERIA"], na.rm = TRUE),
    median_arsenic = median(RESULT[PARAMETER == "ARSENIC"], na.rm = TRUE),
    median_cadmium = median(RESULT[PARAMETER == "CADMIUM"], na.rm = TRUE),
    median_chromium = median(RESULT[PARAMETER == "CHROMIUM"], na.rm = TRUE),
    median_copper = median(RESULT[PARAMETER == "COPPER"], na.rm = TRUE),
    median_iron = median(RESULT[PARAMETER == "IRON"], na.rm = TRUE),
    median_lead = median(RESULT[PARAMETER == "LEAD"], na.rm = TRUE),
    median_lithium = median(RESULT[PARAMETER == "LITHIUM"], na.rm = TRUE),
    median_nickel = median(RESULT[PARAMETER == "NICKEL"], na.rm = TRUE),
    median_coliform = median(RESULT[PARAMETER == "TOTAL COLIFORM BACTERIA"], na.rm = TRUE),
    median_zinc = median(RESULT[PARAMETER == "ZINC"], na.rm = TRUE),
    metal_missing = as.integer(!any(PARAM_TYPE == "Metals")),
    arsenic_missing = as.integer(!any(PARAMETER == "ARSENIC")),
    cadmium_missing = as.integer(!any(PARAMETER == "CADMIUM")),
    chromium_missing = as.integer(!any(PARAMETER == "CHROMIUM")),
    copper_missing = as.integer(!any(PARAMETER == "COPPER")),
    iron_missing = as.integer(!any(PARAMETER == "IRON")),
    lead_missing = as.integer(!any(PARAMETER == "LEAD")),
    lithium_missing = as.integer(!any(PARAMETER == "LITHIUM")),
    nickel_missing = as.integer(!any(PARAMETER == "NICKEL")),
    zinc_missing = as.integer(!any(PARAMETER == "ZINC")),
    coliform_missing = as.integer(!any(PARAMETER == "TOTAL COLIFORM BACTERIA")),
    .groups = "drop"
   )
```


```{r}
testing3 <- testing_water_zip %>%
  group_by(ZIP) %>%
  summarise(
    total_frequency = n(),
    median_ecoli = median(RESULT[PARAMETER == "E COLI BACTERIA"], na.rm = TRUE),
    median_arsenic = median(RESULT[PARAMETER == "ARSENIC"], na.rm = TRUE),
    median_cadmium = median(RESULT[PARAMETER == "CADMIUM"], na.rm = TRUE),
    median_chromium = median(RESULT[PARAMETER == "CHROMIUM"], na.rm = TRUE),
    median_copper = median(RESULT[PARAMETER == "COPPER"], na.rm = TRUE),
    median_iron = median(RESULT[PARAMETER == "IRON"], na.rm = TRUE),
    median_lead = median(RESULT[PARAMETER == "LEAD"], na.rm = TRUE),
    median_lithium = median(RESULT[PARAMETER == "LITHIUM"], na.rm = TRUE),
    median_nickel = median(RESULT[PARAMETER == "NICKEL"], na.rm = TRUE),
    median_coliform = median(RESULT[PARAMETER == "TOTAL COLIFORM BACTERIA"], na.rm = TRUE),
    median_zinc = median(RESULT[PARAMETER == "ZINC"], na.rm = TRUE),
    metal_testing = as.integer(any(PARAM_TYPE == "Metals")),
    arsenic_missing = as.integer(!any(PARAMETER == "ARSENIC")),
    cadmium_missing = as.integer(!any(PARAMETER == "CADMIUM")),
    chromium_missing = as.integer(!any(PARAMETER == "CHROMIUM")),
    copper_missing = as.integer(!any(PARAMETER == "COPPER")),
    iron_missing = as.integer(!any(PARAMETER == "IRON")),
    lead_missing = as.integer(!any(PARAMETER == "LEAD")),
    lithium_missing = as.integer(!any(PARAMETER == "LITHIUM")),
    nickel_missing = as.integer(!any(PARAMETER == "NICKEL")),
    zinc_missing = as.integer(!any(PARAMETER == "ZINC")),
    coliform_missing = as.integer(!any(PARAMETER == "TOTAL COLIFORM BACTERIA")),
    .groups = "drop"
  )
```

```{r}
testing3 <- testing3 |> filter(!(ZIP %in% c("78667", "78680", "78691", "78712", "78763", "78767", "78717", "78754")))
```

```{r}
training3 <- training3 |> filter(!(ZIP %in% c("78667", "78680", "78691", "78712", "78763", "78767", "78717", "78754")))
```

```{r}
testing3$ZIP <- as.numeric(testing3$ZIP)
training3$ZIP <- as.numeric(training3$ZIP)
zip_training3 <- left_join(training3, zipcode2015, by = "ZIP")
zip_testing3 <- left_join(testing3, zipcode2016, by = "ZIP")
```

```{r}
zip_testing3$median_zinc[is.na(zip_testing3$median_zinc)] <- 0
summary(zip_testing3$median_zinc, useNA = "always")
zip_testing3$median_lead[is.na(zip_testing3$median_lead)] <- 0
summary(zip_testing3$median_lead, useNA = "always")
zip_testing3$median_arsenic[is.na(zip_testing3$median_arsenic)] <- 0
summary(zip_testing3$median_arsenic, useNA = "always")
zip_testing3$median_cadmium[is.na(zip_testing3$median_cadmium)] <- 0
summary(zip_testing3$median_cadmium, useNA = "always")
zip_testing3$median_chromium[is.na(zip_testing3$median_chromium)] <- 0
summary(zip_testing3$median_chromium, useNA = "always")
zip_testing3$median_copper[is.na(zip_testing3$median_copper)] <- 0
summary(zip_testing3$median_copper, useNA = "always")
zip_testing3$median_iron[is.na(zip_testing3$median_iron)] <- 0
summary(zip_testing3$median_iron, useNA = "always")
zip_testing3$median_nickel[is.na(zip_testing3$median_nickel)] <- 0
summary(zip_testing3$median_nickel, useNA = "always")

#after missing sample columns were set to 0 or 1
# when there was previously an NA, there will instead be a 0.

zip_training3[is.na(zip_training3)] <- 0
zip_testing3[is.na(zip_testing3)] <- 0

```

```{r}
library(MASS)
# Fit the full model 
full.model <- glm(lowincome ~ total_frequency + median_ecoli + zinc_missing + median_zinc + lead_missing + median_lead + arsenic_missing + median_arsenic + cadmium_missing + median_cadmium + chromium_missing + median_chromium + copper_missing + median_copper + iron_missing + median_iron + nickel_missing + median_nickel, data = zip_training3, family = binomial)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both", 
                      trace = FALSE)
summary(step.model)
```


```{r}
set.seed(1)

glm.fits3 <- glm(lowincome ~ lead_missing + median_lead + median_chromium, data = zip_training3, family = binomial)



# take out cadmium and lithium, arsenic, iron

summary(glm.fits3)
```


```{r}
# Predict probabilities on the test set (zip_testing)
predicted_probabilities <- predict(glm.fits3, newdata = zip_testing3, type = "response")

summary(predicted_probabilities)

# Convert probabilities to binary predictions: 1 if probability > 0.5, otherwise 0
predicted_class <- ifelse(predicted_probabilities > 0.1542737, 1, 0)

#what is the proportion of the high income to low income, can we think about specificity and sensitivity... use ROC curve


# Add predicted class as a new column to zip_testing
zip_testing3$predicted_lowincome <- predicted_class

# View the predictions
head(zip_testing3[, c("lowincome", "predicted_lowincome")])  # Compare actual vs predicted
# Create confusion matrix
table(Actual = zip_testing3$lowincome, Predicted = zip_testing3$predicted_lowincome)
accuracy <- mean(zip_testing3$lowincome == zip_testing3$predicted_lowincome)
confusion_matrix <- confusionMatrix(as.factor(zip_testing3$predicted_lowincome), as.factor(zip_testing3$lowincome))
print(confusion_matrix)


library(pROC)
model_roc <- roc(zip_testing3$lowincome, predicted_probabilities, quiet = TRUE)
model_roc |> ggroc(legacy.axes = TRUE) + geom_abline(intercept = 0, slope = 1) + theme_bw(18)
auc(model_roc)

# if we want to finda. good cutoff, we want to find
coords(model_roc, x = "best", best.method = "youden")
#best cutoff is 0.43 and specificity = high income correct 52% of the time, and sensiticity = correct low income prediction


```
