---
title: "water quality data :("
format: pdf
editor: visual
---
```{r}
library(tidyverse)
library(dplyr)
library(readr)
library(ggplot2)
library(stringr)
library(tidyr)
library(maps)
library(tidygeocoder)
Water_Quality_Sampling_Data <- read_csv("Water_Quality_Sampling_Data.csv")
```


```{r}
water_data <- Water_Quality_Sampling_Data |> mutate(SAMPLE_DATE = as.Date(SAMPLE_DATE, format = "%m/%d/%Y %I:%M:%S %p")) %>% mutate(YEAR = format(as.Date(SAMPLE_DATE), "%Y")) %>% mutate(MONTH = format(as.Date(SAMPLE_DATE), "%m")) %>% filter(YEAR > "2007", YEAR < "2020")
```


training data and testing data 
```{r}
# filter by medium to be only Ground Water and Surface Water
# filter pounds units out
# filter for only bacteria/pathogens and metals
# filter for 2015 only in training, 2016 only in testing
# filter out non-harmful metals in param
training_water <- water_data |> filter(MEDIUM %in% c("Ground Water", "Surface Water"), UNIT != "Pounds (lbs)", PARAM_TYPE %in% c("Bacteria/Pathogens", "Metals"), YEAR =="2015", !(PARAMETER %in% c("ALUMINUM", "BARIUM", "BORON", "STRONTIUM")))
# convert mg/l to ug/l to have all units in unison
training_water$RESULT[training_water$UNIT == "MG/L"] <- training_water$RESULT[training_water$UNIT == "MG/L"] * 1000
training_water$UNIT[training_water$UNIT == "MG/L"] <- "UG/L"


testing_water <- water_data |> filter(MEDIUM %in% c("Ground Water", "Surface Water"), UNIT != "Pounds (lbs)", PARAM_TYPE %in% c("Bacteria/Pathogens", "Metals"), YEAR == "2016", !(PARAMETER %in% c("ALUMINUM", "BARIUM", "BORON", "STRONTIUM")))
# convert mg/l to ug/l to have all units in unison
testing_water$RESULT[testing_water$UNIT == "MG/L"] <- testing_water$RESULT[testing_water$UNIT == "MG/L"] * 1000
testing_water$UNIT[testing_water$UNIT == "MG/L"] <- "UG/L"
```


training data zip
```{r}
# reverse geocode, add address column by using lat and lon
training_water_zip <- training_water |>
    reverse_geocode(lat = LAT_DD_WGS84, long = LON_DD_WGS84, address = addr, method = "osm")
```


```{r}
# fixing addresses that do not contain a zip code

# "Austin, Travis County, Texas, United States" all correspond to Walter E. Long Lake
training_water_zip <- training_water_zip %>%
  mutate(addr = ifelse(addr == "Austin, Travis County, Texas, United States",
                       "Daffan Lane, Austin, Texas, 78724, United States",
                       addr))
# "FM 973 North, Travis County, Texas, United States" all correspond to Gilleland Creek
training_water_zip <- training_water_zip %>%
  mutate(addr = ifelse(addr == "FM 973 North, Travis County, Texas, United States",
                       "FM 973 North, Travis County, Texas, 78763, United States",
                       addr))
# "Travis County, Texas, United States" all correspond to the same area of Barton Creek
training_water_zip <- training_water_zip %>%
  mutate(addr = ifelse(addr == "Travis County, Texas, United States",
                       "Travis County, Texas, 78736, United States",
                       addr))
# "Webberville Road, Travis County, Texas, United States" all correspond to Gilleland Creek
training_water_zip <- training_water_zip %>%
  mutate(addr = ifelse(addr == "Webberville Road, Travis County, Texas, United States",
                       "17322 Webberville Road, Travis County, Texas, 78653, United States",
                       addr))
```



```{r}
# identify where the missing address values are because of missing lat lon coordinates -> they are all in bear creek

training_water_zip %>%
  filter(is.na(addr)) %>%
  pull(WATERSHED) %>%
  unique()

#replace NA for address of bear creek

training_water_zip <- training_water_zip %>%
  mutate(addr = ifelse(is.na(addr),
                        "Bear Creek, Hays County, Texas, 78737, United States",
                        addr))


```


```{r}
# make a zip code column 

training_water_zip <- training_water_zip %>%
  mutate(ZIP = str_extract(addr, "\\b7\\d{4}\\b"))

```



testing data zip

```{r}
# reverse geocode, add address column by using lat and lon
testing_water_zip <- testing_water |>
    reverse_geocode(lat = LAT_DD_WGS84, long = LON_DD_WGS84, address = addr, method = "osm")
```

```{r}
# identify where the missing address values for testing data are because of missing lat lon coordinates -> they are in bear creek and barton creek (specifically airman's cave)
testing_water_zip %>%
  filter(is.na(addr)) %>%
  pull(WATERSHED) %>%
  unique()
```

```{r}
#replace NA for address of bear creek observations

testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(is.na(addr) & WATERSHED == "Bear Creek",
                       "Bear Creek, Hays County, Texas, 78737, United States",
                       addr))

# replace NA for address of barton creek airman's cave

testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(is.na(addr) & WATERSHED == "Barton Creek",
                       "Austin, Texas, 78704, United States",
                       addr))
```

```{r}
# fixing addresses that do not contain a zip code

# "Austin, Travis County, Texas, United States" all correspond to Walter E. Long Lake
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Austin, Travis County, Texas, United States",
                       "Daffan Lane, Austin, Texas, 78724, United States",
                       addr))
# "Cannonville, Howard Ranch, Hays County, Texas, United States" all correspond to Onion Creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Cannonville, Howard Ranch, Hays County, Texas, United States",
                       "Hays County, Texas, 78619, United States",
                       addr))
# "Hays County, Texas, United States" correspond to two different parts of Onion Creek, but they both have zip code 78619
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Hays County, Texas, United States",
                       "Hays County, Texas, 78619, United States",
                       addr))
# "McCafferty Road, Hays County, Texas, United States" corresponds to a part of onion creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "McCafferty Road, Hays County, Texas, United States",
                       "Hays County, Texas, 78620, United States",
                       addr))
# "Pursley Road, Hays County, Texas, United States" corresponds to a part of onion creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Pursley Road, Hays County, Texas, United States",
                       "Pursley Road, Mount Sharp, Hays County, Texas, 78620, United States",
                       addr))
# "Ranch Road 12, Hays County, Texas, United States" corresponds to a part of onion creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Ranch Road 12, Hays County, Texas, United States",
                       "Hays County, Texas, 78619, United States",
                       addr))
# "Ranch Road 150 West, Dripping Springs, Hays County, Texas, United States" corresponds to a part of onion creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Ranch Road 150 West, Dripping Springs, Hays County, Texas, United States",
                       "Ranch Road 150 West, Hays County, Texas, 78619, United States",
                       addr))
# "Ranch to Market Road 967, Buda, Hays County, Texas, United States" corresponds to a little bear creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Ranch to Market Road 967, Buda, Hays County, Texas, United States",
                       "Ranch to Market Road 967, Buda, Texas, 78610, United States",
                       addr))
# "Wylie Kuykendall Lane, Hays County, Texas, United States" corresponds to a part of onion creek
testing_water_zip <- testing_water_zip %>%
  mutate(addr = ifelse(addr == "Wylie Kuykendall Lane, Hays County, Texas, United States",
                       "Wylie Kuykendall Lane, Hays County, Texas, 78667, United States",
                       addr))
```

```{r}
# make a zip code column 

testing_water_zip <- testing_water_zip %>%
  mutate(ZIP = str_extract(addr, "\\b7\\d{4}\\b"))

```







get total results by coordinates:
for training data
```{r}
# note that many coordinates are missing!
coord_results_tr <- training_water_zip %>%
  group_by(LAT_DD_WGS84, LON_DD_WGS84) %>%
  summarise(
    total_bacteria = sum(RESULT[PARAM_TYPE == "Bacteria/Pathogens"], na.rm = TRUE),
    total_metals = sum(RESULT[PARAM_TYPE == "Metals"], na.rm = TRUE),
    .groups = "drop"
  )
```

by watershed
```{r}
watershed_results_tr <- training_water_zip %>%
  group_by(WATERSHED) %>%
  summarise(
    total_bacteria = sum(RESULT[PARAM_TYPE == "Bacteria/Pathogens"], na.rm = TRUE),
    total_metals = sum(RESULT[PARAM_TYPE == "Metals"], na.rm = TRUE),
    .groups = "drop"
  )
```

by zip

```{r}
zip_results_tr <- training_water_zip %>%
  group_by(ZIP) %>%
  summarise(
    total_bacteria = sum(RESULT[PARAM_TYPE == "Bacteria/Pathogens"], na.rm = TRUE),
    total_metals = sum(RESULT[PARAM_TYPE == "Metals"], na.rm = TRUE),
    .groups = "drop"
  )
```

for testing data
```{r}
watershed_results_te <- testing_water_zip %>%
  group_by(WATERSHED) %>%
  summarise(
    total_bacteria = sum(RESULT[PARAM_TYPE == "Bacteria/Pathogens"], na.rm = TRUE),
    total_metals = sum(RESULT[PARAM_TYPE == "Metals"], na.rm = TRUE),
    .groups = "drop"
  )

zip_results_te <- testing_water_zip %>%
  group_by(ZIP) %>%
  summarise(
    total_bacteria = sum(RESULT[PARAM_TYPE == "Bacteria/Pathogens"], na.rm = TRUE),
    total_metals = sum(RESULT[PARAM_TYPE == "Metals"], na.rm = TRUE),
    .groups = "drop"
  )
```






random visualizations
```{r}

library(tidyr)

# Reshape the data to long format for faceting
coord_long <- coord_results_tr %>%
  pivot_longer(
    cols = c(total_bacteria, total_metals),
    names_to = "Type",
    values_to = "Total"
  )

# Plot the maps
ggplot(coord_long, aes(x = LON_DD_WGS84, y = LAT_DD_WGS84)) +
  geom_point(aes(size = Total, color = Type), alpha = 0.5) +
  facet_wrap(~Type) +
  scale_size_continuous(range = c(1, 25)) +
  coord_fixed() +
  theme_minimal() +
  labs(
    title = "Total Bacteria/Pathogens and Metals per Location",
    x = "Longitude",
    y = "Latitude",
    size = "Total Amount",
    color = "Parameter Type"
  )

```






```{r}
# filter for all years but surface water and bacteria
bacteria_water <- water_data  %>% filter(PARAM_TYPE == "Bacteria/Pathogens")

```

```{r}
metals_soil <- water_data |> filter(MEDIUM == "Soil")
```


```{r}
# visualization for surface water bacteria ALL YEARS

# count number of observations per watershed per year
yearly_counts <- bacteria_water %>%
  group_by(WATERSHED, YEAR) %>%
  summarise(obs_count = n(), .groups = "drop")

# get  top 5 most sampled watersheds overall
top_5_watersheds <- yearly_counts %>%
  group_by(WATERSHED) %>%
  summarise(total_obs = sum(obs_count)) %>%
  arrange(desc(total_obs)) %>%
  slice(1:5) %>%
  pull(WATERSHED)

# filter to only the top 5 watersheds
top_watershed_data <- yearly_counts %>%
  filter(WATERSHED %in% top_5_watersheds)

# plot
ggplot(top_watershed_data, aes(x = as.numeric(YEAR), y = obs_count, color = WATERSHED)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  labs(
    title = "Top 5 Watersheds by Sampling Frequency (by Year)",
    x = "Year",
    y = "Number of Bacteria/Pathogens Observations",
    color = "Watershed"
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(1990, 2025, 2)) +
  theme(legend.position = "bottom")
```


```{r}
# playing
# trying to see amount of metals? in water?? for ALL YEARS

metals_water <- Water_Quality_Sampling_Data %>% filter(PARAM_TYPE == "Metals") %>% filter(MEDIUM == "Surface Water") 
metals_water<- metals_water %>% mutate(SAMPLE_DATE = as.Date(SAMPLE_DATE, format = "%m/%d/%Y %I:%M:%S %p"))
```

```{r}
# visualization for surface water metals total for ALL YEARS

# convert mg/l to ug/l
metals_water$RESULTS[metals_water$UNIT == "MG/L"] <- metals_water$RESULTS[metals_water$UNIT == "MG/L"] * 1000
metals_water$UNIT[metals_water$UNIT == "MG/L"] <- "UG/L"


# count number of observations per watershed per year
yearly_counts <- metals_water %>%
 # filter(PARAMETER == "ZINC") %>%
  filter(UNIT == "UG/L") |>
  group_by(WATERSHED, YEAR) %>%
  summarise(obs_count = sum(RESULT), .groups = "drop")

# get  top 5 most sampled watersheds overall
top_5_watersheds <- yearly_counts %>%
  group_by(WATERSHED) %>%
  summarise(total_obs = sum(obs_count)) %>%
  arrange(desc(total_obs)) %>%
  slice(6:10) %>%
  pull(WATERSHED)

# filter to only the top 5 watersheds
top_watershed_data <- yearly_counts %>%
  filter(WATERSHED %in% top_5_watersheds)

# plot
ggplot(top_watershed_data, aes(x = as.numeric(YEAR), y = obs_count, color = WATERSHED)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  labs(
    title = "Top 5 Watersheds by Sampling Frequency (by Year)",
    x = "Year",
    y = "Number of Metals Observations",
    color = "Watershed"
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(1990, 2025, 2)) +
  theme(legend.position = "bottom")
```


```{r}
# pcbs in surface water
pcbs_water <- Water_Quality_Sampling_Data %>%  filter(PARAM_TYPE == "PCBs")
pcbs_water<- pcbs_water %>% mutate(SAMPLE_DATE = as.Date(SAMPLE_DATE, format = "%m/%d/%Y %I:%M:%S %p"))
```

```{r}
# visualization for all water pcbs ALL YEARS

# year column
pcbs_water <- pcbs_water %>%
  mutate(YEAR = format(as.Date(SAMPLE_DATE), "%Y"))

# count number of observations per watershed per year
yearly_counts <- pcbs_water %>%
  group_by(WATERSHED, YEAR) %>%
  summarise(obs_count = n(), .groups = "drop")

# get  top 5 most sampled watersheds overall
top_5_watersheds <- yearly_counts %>%
  group_by(WATERSHED) %>%
  summarise(total_obs = sum(obs_count)) %>%
  arrange(desc(total_obs)) %>%
  slice(1:10) %>%
  pull(WATERSHED)

# filter to only the top 5 watersheds
top_watershed_data <- yearly_counts %>%
  filter(WATERSHED %in% top_5_watersheds)

# plot
ggplot(top_watershed_data, aes(x = as.numeric(YEAR), y = obs_count, color = WATERSHED)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  labs(
    title = "Top 5 Watersheds by Sampling Frequency (by Year)",
    x = "Year",
    y = "Number of Bacteria/Pathogens Observations",
    color = "Watershed"
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(1990, 2025, 2)) +
  theme(legend.position = "bottom")
```

```{r}
# visualization for surface water bacteria total results per year

# year column
bacteria_water <- bacteria_water |>
  mutate(YEAR = format(as.Date(SAMPLE_DATE), "%Y"))

# count number of observations per watershed per year
yearly_counts <- bacteria_water %>%
  filter(UNIT == "Colonies/100mL") %>%
  filter(PARAMETER == "E COLI BACTERIA") |>
  group_by(WATERSHED, YEAR) %>% 
  summarise(sum_result = sum(RESULT), .groups = "drop")

# get  top 5 most sampled watersheds overall
top_5_watersheds <- yearly_counts |>
  group_by(WATERSHED) |>
  summarise(total_obs = sum(sum_result)) |>
  arrange(desc(total_obs)) |>
  slice(1:5) |>
  pull(WATERSHED)

# filter to only the top 5 watersheds
top_watershed_data <- yearly_counts %>%
  filter(WATERSHED %in% top_5_watersheds)

# plot
ggplot(top_watershed_data, aes(x = as.numeric(YEAR), y = sum_result, color = WATERSHED)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  labs(
    title = "Top 5 Watersheds by Sampling Frequency (by Year)",
    x = "Year",
    y = "Number of Bacteria/Pathogens Observations",
    color = "Watershed"
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = seq(1990, 2025, 2)) +
  theme(legend.position = "bottom")
```


```{r}
# use metals_sg_water data to visualize metal peaks in watersheds during 2014 

# count number of observations per watershed per month
monthly_counts <- bacteria_metal_water %>%
 # filter(PARAMETER == "ZINC") %>%
  group_by(WATERSHED, MONTH) %>%
  summarise(obs_count = sum(RESULT), .groups = "drop")

# get  top 5 most sampled watersheds overall
top_5_watersheds <- monthly_counts %>%
  group_by(WATERSHED) %>%
  summarise(total_obs = sum(obs_count)) %>%
  arrange(desc(total_obs)) %>%
  slice(2:12) %>%
  pull(WATERSHED)

# filter to only the top 5 watersheds
top_watershed_data <- monthly_counts %>%
  filter(WATERSHED %in% top_5_watersheds)

# plot
ggplot(top_watershed_data, aes(x = as.numeric(MONTH), y = obs_count, color = WATERSHED)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  labs(
    title = "Top 5 Watersheds by Sampling Frequency (by month)",
    x = "month",
    y = "Number of Metals Observations",
    color = "Watershed"
  ) +
  theme_minimal() +

  theme(legend.position = "bottom")

```


```{r}
# visualize total sample frequencies per month code, key by zip code


# count number of observations per watershed per month
monthly_counts <- training_water_zip %>%
 # filter(PARAMETER == "ZINC") %>%
  group_by(ZIP, MONTH) %>%
  summarise(result_month = sum(RESULT), .groups = "drop")

# get  top 5 most sampled watersheds overall
top_zip <- monthly_counts %>%
  group_by(ZIP) %>%
  summarise(total_obs = sum(result_month)) %>%
  arrange(desc(total_obs)) %>%
  slice(2:10) %>%
  pull(ZIP)

# filter to only the top 5 watersheds
top_watershed_data <- monthly_counts %>%
  filter(ZIP %in% top_zip)

# plot
ggplot(top_watershed_data, aes(x = as.numeric(MONTH), y = result_month, color = ZIP)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  labs(
    title = "ZIP Codes by Results per Month",
    x = "Month",
    y = "Total Results per Month",
    color = "ZIP"
  ) +
  theme_minimal() +

  theme(legend.position = "bottom")
```

```{r}
# Reshape your data
coord_long <- coord_results_tr %>%
  pivot_longer(
    cols = c(total_bacteria, total_metals),
    names_to = "Type",
    values_to = "Total"
  ) %>%
  filter(!is.na(LAT_DD_WGS84) & !is.na(LON_DD_WGS84))

# Get the Texas map outlines
texas_map <- map_data("state") %>%
  filter(region == "texas")

# Plot
ggplot() +
  geom_polygon(data = texas_map, aes(x = long, y = lat, group = group),
               fill = "white", color = "black") +
  geom_point(data = coord_long, 
             aes(x = LON_DD_WGS84, y = LAT_DD_WGS84, size = Total, color = Type),
             alpha = 0.3) +
  facet_wrap(~Type) +
  scale_size_continuous(range = c(1, 5)) +
  coord_fixed(1.3) +
  theme_minimal() +
  labs(
    title = "Total Bacteria/Pathogens and Metals Across Texas",
    x = "Longitude",
    y = "Latitude",
    size = "Total Amount",
    color = "Parameter Type"
  )
```



```{r}
# Reshape your data
coord_long <- coord_results_tr %>%
  pivot_longer(
    cols = c(total_bacteria, total_metals),
    names_to = "Type",
    values_to = "Total"
  ) %>%
  filter(!is.na(LAT_DD_WGS84) & !is.na(LON_DD_WGS84))

# Get Texas outline
texas_map <- map_data("state") %>%
  filter(region == "texas")

# Plot with zoom
ggplot() +
  geom_polygon(data = texas_map, aes(x = long, y = lat, group = group),
               fill = "white", color = "black") +
  geom_point(data = coord_long, 
             aes(x = LON_DD_WGS84, y = LAT_DD_WGS84, size = Total, color = Type),
             alpha = 0.7) +
  facet_wrap(~Type) +
  scale_size_continuous(range = c(2, 10)) +
  coord_fixed(1.3, 
              xlim = c(-98.2, -97.4),   # Longitude window
              ylim = c(30.0, 30.6)) +    # Latitude window
  theme_minimal() +
  labs(
    title = "Total Bacteria/Pathogens and Metals (Austin Area)",
    x = "Longitude",
    y = "Latitude",
    size = "Total Amount",
    color = "Parameter Type"
  )
```
